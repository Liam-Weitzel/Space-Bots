name: CMake on multiple platforms

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        include:
          # - os: windows-2025
          #   os-name: windows
          #   c_compiler: cl
          #   cpp_compiler: cl
          #   arch: x64
          # - os: windows-11-arm
          #   os-name: windows
          #   c_compiler: cl
          #   cpp_compiler: cl
          #   arch: arm64
            
          - os: ubuntu-24.04
            os-name: linux
            c_compiler: gcc
            cpp_compiler: g++
            arch: x64
            display: x11
          - os: ubuntu-24.04
            os-name: linux
            c_compiler: gcc
            cpp_compiler: g++
            arch: x64
            display: wayland
          # - os: ubuntu-24.04-arm
          #   os-name: linux
          #   c_compiler: gcc
          #   cpp_compiler: g++
          #   arch: arm64
          #   display: x11
          # - os: ubuntu-24.04-arm
          #   os-name: linux
          #   c_compiler: gcc
          #   cpp_compiler: g++
          #   arch: arm64
          #   display: wayland
            
          # - os: macos-13
          #   os-name: mac
          #   c_compiler: clang
          #   cpp_compiler: clang++
          #   arch: x64
          #   osx_deployment_target: "10.14"
          # - os: macos-15
          #   os-name: mac
          #   c_compiler: clang
          #   cpp_compiler: clang++
          #   arch: arm64
          #   osx_deployment_target: "11.0"

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive

    # NOTE: most of the deps should be handled in cmake itself, but some are github actions specific only
    # required for virtualization etc. those can be installed here.
    - name: Setup
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          cmake \
          gcc \
          g++

        if [ "${{ matrix.display }}" = "x11" ]; then
          sudo apt-get install -y \
            libx11-dev \
            xorg-dev \
            xvfb
        fi

        if [ "${{ matrix.display }}" = "wayland" ]; then
          sudo apt-get install -y \
            sway \
            xwayland \
            libegl1-mesa-dev \
            libwayland-dev \
            wayland-protocols \
            libxkbcommon-dev \
            libffi-dev

          export XDG_RUNTIME_DIR=/tmp/runtime-dir
          mkdir -p $XDG_RUNTIME_DIR
          chmod 700 $XDG_RUNTIME_DIR

          export LD_LIBRARY_PATH=/usr/lib/x86_64-linux-gnu:/usr/lib/wayland:/usr/lib/libxkbcommon:/usr/lib/libffi:$LD_LIBRARY_PATH

          WLR_BACKENDS=headless sway --verbose &
          sleep 3
        fi

    - name: Build client
      run: |
        cd ${{ github.workspace }}/client
        mkdir build/
        cd build/
        cmake \
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }} \
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }} \
        -DCMAKE_BUILD_TYPE=Release \
        -DCMAKE_SYSTEM_PROCESSOR=${{ matrix.arch }} \
        ${{ matrix.osx_deployment_target && format('-DCMAKE_OSX_DEPLOYMENT_TARGET={0}', matrix.osx_deployment_target) || '' }} \
        ${{ matrix.display == 'wayland' && '-DUSE_WAYLAND=ON -DUSE_X11=OFF' || '' }} \
        -S ..
        make -j$(nproc)

    - name: Test Client
      run: |
        cd ${{ github.workspace }}/client
        if [ "${{ matrix.display }}" = "x11" ]; then
          xvfb-run ./prep_models
          xvfb-run ./client_test
          xvfb-run ./client
        fi
        if [ "${{ matrix.display }}" = "wayland" ]; then
          ./prep_models
          ./client_test
          ./client
        fi

    - name: Build server
      run: |
        cd ${{ github.workspace }}/server
        mkdir build/
        cd build/
        cmake \
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }} \
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }} \
        -DCMAKE_BUILD_TYPE=Release \
        -DCMAKE_SYSTEM_PROCESSOR=${{ matrix.arch }} \
        ${{ matrix.osx_deployment_target && format('-DCMAKE_OSX_DEPLOYMENT_TARGET={0}', matrix.osx_deployment_target) || '' }} \
        ${{ matrix.display == 'wayland' && '-DUSE_WAYLAND=ON -DUSE_X11=OFF' || '' }} \
        -S ..
        make -j$(nproc)

    - name: Test Server
      run: |
        echo "dummy"
